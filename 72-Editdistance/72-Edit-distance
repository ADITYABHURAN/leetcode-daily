//recurssive approach 
/**
 * @param {string} word1
 * @param {string} word2
 * @return {number}
 */
var minDistance = function(word1, word2) {
    
    var n = word1.length;
    var m = word2.length;

    var number_of_operations = function(index1,index2){
        //base case 
        if(index1>n-1 && index2>m-1){
           return 0;
        }
        if(index1>n-1){
            return m -index2;
        }
        if(index2>m-1){
            return n - index1;
        }
        //recurssive 
        if(word1[index1]===word2[index2]){
            return number_of_operations(index1 +1,index2+1);
        }
        var insert = 1 + number_of_operations(index1,index2+1);
        var deleteOp = 1 + number_of_operations(index1+1,index2);
        var replace = 1+ number_of_operations(index1+1,index2+1);
        return Math.min(insert,deleteOp,replace)
    }
    return number_of_operations(0,0);
};

//exceeds run time 
